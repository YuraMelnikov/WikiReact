import React, { useState, useMemo } from 'react';
import { feature } from 'topojson-client';
import { useSpring, animated } from 'react-spring';
import { scaleLinear, scaleSequential, geoMercator, geoPath } from 'd3';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSortNumericDownAlt, faSortAlphaDown, faBars, faRedo } from '@fortawesome/free-solid-svg-icons';
import { interpolateRgb } from 'd3-interpolate';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var defaultValues = {
    barWidth: 10,
    barHeight: 300,
    fontSize: 10,
    fontFamily: "sans-serif",
    fontColour: '#444444'
};
// reference: https://github.com/d3/d3-axis/blob/master/src/axis.js
var Legend = function (props) {
    var _a = __assign(__assign({}, defaultValues), props), barWidth = _a.barWidth, barHeight = _a.barHeight, colourScale = _a.colourScale, fontSize = _a.fontSize, fontFamily = _a.fontFamily, fontColour = _a.fontColour;
    var margin = { top: 10, right: 40, bottom: 10, left: 10 };
    var tickPadding = 3;
    var axisScale = scaleLinear().domain(colourScale.domain()).range([barHeight, 0]);
    return (React.createElement(React.Fragment, null,
        React.createElement("defs", null,
            React.createElement("linearGradient", { id: "linear-gradient", x1: "0%", y1: "100%", x2: "0%", y2: "0%" }, axisScale.ticks().map(function (value, index, array) { return (React.createElement("stop", { key: index, offset: 100 * index / array.length + "%", stopColor: colourScale(value) })); }))),
        React.createElement("g", { transform: "translate(" + margin.left + "," + margin.top + ")" },
            React.createElement("rect", { transform: "translate(0, 0)", width: barWidth, height: barHeight, fill: "url(#linear-gradient)" })),
        React.createElement("g", { transform: "translate(" + (margin.left + barWidth) + "," + margin.top + ")", fill: "none", fontSize: fontSize, textAnchor: "start" }, axisScale.ticks(5).map(function (value, index) { return (React.createElement("g", { key: index, opacity: 0.8, transform: "translate(0," + axisScale(value) + ")" },
            React.createElement("text", { fill: fontColour, x: tickPadding, fontFamily: fontFamily }, value))); }))));
};

var StyledPath = styled.path(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  &:hover {\n    stroke: #888888;\n  }\n"], ["\n  &:hover {\n    stroke: #888888;\n  }\n"])));
var StyledContainer = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  border: solid 1px #ddd;\n"], ["\n  border: solid 1px #ddd;\n"])));
var templateObject_1, templateObject_2;

var defaultValues$1 = {
    mapData: new Array(),
    areaCounts: new Map()
};
var getColour = function (scale, areaCounts, id) {
    if (areaCounts.has(id)) {
        var countData = areaCounts.get(id);
        if (countData) {
            return scale(countData.count);
        }
    }
    return scale(0);
};
var MapPresentation = function (props) {
    var _a = __assign(__assign({}, defaultValues$1), props), width = _a.width, height = _a.height, mapData = _a.mapData, areaCounts = _a.areaCounts, zoomToId = _a.zoomToId, colourScale = _a.colourScale, geoPath = _a.geoPath;
    var translateX = 0;
    var translateY = 0;
    var scale = 1;
    var strokeWidth = 0.5;
    if (zoomToId) {
        // get a specific country
        var country = mapData.filter(function (item) { return item.id === zoomToId; });
        if (country.length > 0) {
            var bounds = geoPath.bounds(country[0]);
            var dx = bounds[1][0] - bounds[0][0];
            var dy = bounds[1][1] - bounds[0][1];
            var x = (bounds[0][0] + bounds[1][0]) / 2;
            var y = (bounds[0][1] + bounds[1][1]) / 2;
            scale = Math.max(1, Math.min(20, 0.9 / Math.max(dx / width, dy / height)));
            translateX = width / 2 - scale * x;
            translateY = height / 2 - scale * y;
            strokeWidth = 0.5 / scale;
        }
    }
    var svgAnimation = useSpring({ width: width, height: height, viewBox: "0 0 " + width + " " + height, transform: "translate(" + translateX + ", " + translateY + ") scale(" + scale + ")" });
    /*
      NOTE: There is a bug in react-spring https://github.com/react-spring/react-spring/issues/641

      This means we can't animate the viewbox until v9.0 of react-spring but the effect is still usable
    */
    return (React.createElement(StyledContainer, null, mapData && (React.createElement(animated.svg, { width: svgAnimation.width, height: svgAnimation.height, viewBox: "0 0 " + width + " " + height },
        React.createElement(animated.g, { className: "paths", transform: svgAnimation.transform }, mapData.map(function (d, i) { return (React.createElement(StyledPath, { key: "path-" + i, d: geoPath(d), className: "country", fill: getColour(colourScale, areaCounts, d.id), stroke: zoomToId && zoomToId === d.id ? "#000000" : "#BBBBBB", strokeWidth: zoomToId && zoomToId === d.id ? strokeWidth * 2 : strokeWidth })); })),
        areaCounts && areaCounts.size &&
            React.createElement("g", { transform: "translate(10, " + ((height - (height / 3)) - 20) + ")" },
                React.createElement(Legend, { colourScale: colourScale, barHeight: height / 3 }))))));
};

var Button = styled(animated.button)(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["\n    position: absolute;\n    width: 30px;\n    height: 30px;\n    display: inline-block;\n    text-align: center;\n    vertical-align: middle;\n    user-select: none;\n    margin:0;\n    padding:0;\n    border-radius: 4px;\n    background-colour: #ffffff;\n    border-color: #dddddd;\n    cursor: pointer;\n\n    &:focus {\n        outline: 0;\n    }\n\n    &:hover {\n        background-color: #f8f8f8;\n        border-color: #aaaaaa;\n    }\n"], ["\n    position: absolute;\n    width: 30px;\n    height: 30px;\n    display: inline-block;\n    text-align: center;\n    vertical-align: middle;\n    user-select: none;\n    margin:0;\n    padding:0;\n    border-radius: 4px;\n    background-colour: #ffffff;\n    border-color: #dddddd;\n    cursor: pointer;\n\n    &:focus {\n        outline: 0;\n    }\n\n    &:hover {\n        background-color: #f8f8f8;\n        border-color: #aaaaaa;\n    }\n"])));
var SortButton = styled(Button)(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["\n    top: 0px;\n"], ["\n    top: 0px;\n"])));
var OpenButton = styled(Button)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    top: 0px;\n    right: 10px;\n"], ["\n    top: 0px;\n    right: 10px;\n"])));
var ResetButton = styled(Button)(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    top: 0px;\n    right: 45px;\n"], ["\n    top: 0px;\n    right: 45px;\n"])));
var List = styled(animated.div)(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n    position: absolute;\n    top: 35px;\n    width: 230px;\n    overflow-y: auto;\n    overflow-x: hidden;\n    border-top: solid 1px #ddd;\n    border-left: solid 1px #ddd;\n    border-bottom: none;\n    border-top-left-radius: 8px;\n    background-color: rgba(255,255,255,0.8);\n    padding: 5px;\n"], ["\n    position: absolute;\n    top: 35px;\n    width: 230px;\n    overflow-y: auto;\n    overflow-x: hidden;\n    border-top: solid 1px #ddd;\n    border-left: solid 1px #ddd;\n    border-bottom: none;\n    border-top-left-radius: 8px;\n    background-color: rgba(255,255,255,0.8);\n    padding: 5px;\n"])));
var ListItem = styled(animated.div)(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    position: relative;\n    padding: 5px 0;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #eeeeee;\n    }\n\n    .name {\n        flex-grow: 1;\n        padding: 0 5px;\n        text-align: left;\n        margin-left: 5px;\n    }\n\n    .count {\n        width: 30px;\n        align-self: flex-end;\n        text-align: right;\n        margin-right: 5px;\n    }\n"], ["\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    position: relative;\n    padding: 5px 0;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #eeeeee;\n    }\n\n    .name {\n        flex-grow: 1;\n        padding: 0 5px;\n        text-align: left;\n        margin-left: 5px;\n    }\n\n    .count {\n        width: 30px;\n        align-self: flex-end;\n        text-align: right;\n        margin-right: 5px;\n    }\n"])));
var Container = styled(animated.div)(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    position: absolute;\n    top: 10px;\n    right:0;\n    overflow: hidden;\n"], ["\n    position: absolute;\n    top: 10px;\n    right:0;\n    overflow: hidden;\n"])));
var templateObject_1$1, templateObject_2$1, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;

var defaultValues$2 = {
    open: false,
    orderBy: 'name',
    fontSize: 12,
    fontFamily: 'Arial',
    fontColour: '#444444',
    onSelect: function (selectedListItem) { }
};
var sortButtonAnimationStyles = {
    open: { right: '80px', opacity: 1 },
    closed: { right: '-30px', opacity: 0 }
};
var listAnimationStyles = {
    open: { right: '1px', opacity: 1 },
    closed: { right: '-280px', opacity: 0 }
};
var listItemAnimationStyles = {
    open: { right: '0px', opacity: 1 },
    closed: { right: '-250px', opacity: 0 }
};
var containerAnimationStyles = {
    open: { width: '290px', height: '500px' },
    closed: { width: '75px', height: '30px' }
};
var OrderBy;
(function (OrderBy) {
    OrderBy[OrderBy["Count"] = 0] = "Count";
    OrderBy[OrderBy["Name"] = 1] = "Name";
})(OrderBy || (OrderBy = {}));
var PopOutAreaList = function (props) {
    var _a = __assign(__assign({}, defaultValues$2), props), allAreaCounts = _a.allAreaCounts, onSelect = _a.onSelect, parentHeight = _a.parentHeight, fontColour = _a.fontColour, fontFamily = _a.fontFamily, fontSize = _a.fontSize;
    var _b = __read(useState(false), 2), isOpen = _b[0], setIsOpen = _b[1];
    var _c = __read(useState(OrderBy.Count), 2), orderBy = _c[0], setOrderBy = _c[1];
    var containerProps = useSpring(isOpen ? containerAnimationStyles.open : containerAnimationStyles.closed);
    var searchButtonProps = useSpring(isOpen ? sortButtonAnimationStyles.open : sortButtonAnimationStyles.closed);
    var listProps = useSpring(isOpen ? listAnimationStyles.open : listAnimationStyles.closed);
    var listItemProps = useSpring(isOpen ? listItemAnimationStyles.open : listItemAnimationStyles.closed);
    var listItems = useMemo(function () {
        if (allAreaCounts && allAreaCounts.length > 0) {
            return allAreaCounts.sort(function (a, b) {
                if (orderBy === OrderBy.Count) {
                    if (a.count > b.count) {
                        return -1;
                    }
                    if (a.count < b.count) {
                        return 1;
                    }
                    if (a.count === b.count) {
                        if (a.displayName < b.displayName) {
                            return -1;
                        }
                        if (a.displayName > b.displayName) {
                            return 1;
                        }
                        return 0;
                    }
                }
                else if (orderBy === OrderBy.Name) {
                    if (a.displayName < b.displayName) {
                        return -1;
                    }
                    if (a.displayName > b.displayName) {
                        return 1;
                    }
                }
                return 0;
            });
        }
        return [];
    }, [allAreaCounts, orderBy]);
    return (React.createElement(Container, { style: containerProps },
        React.createElement(SortButton, { title: "Order by " + (orderBy === OrderBy.Count ? 'name' : 'count'), style: searchButtonProps, onClick: function () { return setOrderBy(orderBy === OrderBy.Count ? OrderBy.Name : OrderBy.Count); } },
            React.createElement(FontAwesomeIcon, { icon: orderBy === OrderBy.Count ? faSortNumericDownAlt : faSortAlphaDown })),
        React.createElement(OpenButton, { title: (isOpen ? 'Close' : 'Open') + " list", onClick: function () { return setIsOpen(!isOpen); } },
            React.createElement(FontAwesomeIcon, { icon: faBars })),
        React.createElement(ResetButton, { title: 'Reset Map', onClick: function () { return onSelect(undefined); } },
            React.createElement(FontAwesomeIcon, { icon: faRedo })),
        React.createElement(List, { style: __assign({ height: parentHeight - 51, fontFamily: fontFamily, colour: fontColour, fontSize: fontSize + "px" }, listProps) }, listItems.map(function (value, index) { return (React.createElement(ListItem, { key: index, style: listItemProps, onClick: function () { return onSelect(value); } },
            React.createElement("div", { className: "name" }, value.displayName),
            React.createElement("div", { className: "count" }, value.count))); }))));
};

var Colour;
(function (Colour) {
    Colour[Colour["Red"] = 1] = "Red";
    Colour[Colour["Blue"] = 2] = "Blue";
    Colour[Colour["Green"] = 3] = "Green";
    Colour[Colour["Grey"] = 4] = "Grey";
})(Colour || (Colour = {}));

var colourInterpolateFunc = function (colour, from, to) {
    if (colour) {
        switch (colour) {
            case Colour.Red:
                return interpolateRgb.gamma(2.2)("#FFFFFF", "#f97c7c");
            case Colour.Blue:
                return interpolateRgb.gamma(2.2)("#FFFFFF", "#9fc5e8");
            case Colour.Green:
                return interpolateRgb.gamma(2.2)("#FFFFFF", "#78d878");
            case Colour.Grey:
                return interpolateRgb.gamma(2.2)("#FFFFFF", "#aaaaaa");
        }
    }
    return interpolateRgb.gamma(2.2)(from || "#FFFFFF", to || "#9fc5e8");
};

var CountryDisplay = styled.div(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    background-color: rgba(255,255,255,0.8);\n    max-width: 400px;\n    padding: 10px;\n    border-radius: 4px;\n    border: solid 1px #ddd;\n"], ["\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    background-color: rgba(255,255,255,0.8);\n    max-width: 400px;\n    padding: 10px;\n    border-radius: 4px;\n    border: solid 1px #ddd;\n"])));
var templateObject_1$2;

var defaultValues$3 = {
    mapData: new Array(),
    mapDataObjectProperty: 'countries',
    featureNameProperty: 'name',
    areaCounts: new Map(),
    removeAreaIds: new Set(),
    fontFamily: 'Arial',
    fontColour: '#444444',
    listFontSize: 12,
    headerFontSize: 16
};
var TopologyCountMap = function (props) {
    var _a = __assign(__assign({}, defaultValues$3), props), width = _a.width, height = _a.height, mapData = _a.mapData, mapDataObjectProperty = _a.mapDataObjectProperty, featureNameProperty = _a.featureNameProperty, areaCounts = _a.areaCounts, removeAreaIds = _a.removeAreaIds, mapColour = _a.mapColour, mapColourFrom = _a.mapColourFrom, mapColourTo = _a.mapColourTo, fontFamily = _a.fontFamily, fontColour = _a.fontColour, listFontSize = _a.listFontSize, headerFontSize = _a.headerFontSize;
    var _b = __read(useState(), 2), selectedListItem = _b[0], setSelectedListItem = _b[1];
    var maxCount = useMemo(function () {
        var e_1, _a;
        if (areaCounts && areaCounts.size > 0) {
            var values = [];
            try {
                for (var _b = __values(areaCounts.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    values.push(value.count);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return Math.max.apply(Math, __spread(values));
        }
        return 0;
    }, [areaCounts]);
    var presentationData = useMemo(function () {
        var data = mapData;
        var mapFeatures = feature(data, data.objects[mapDataObjectProperty]);
        if (removeAreaIds && removeAreaIds.size > 0) {
            mapFeatures.features = mapFeatures.features.filter(function (value) {
                if (value.id) {
                    return !removeAreaIds.has(value.id);
                }
                return false;
            });
        }
        return mapFeatures;
    }, [mapData, removeAreaIds, mapDataObjectProperty]);
    var colourScale = useMemo(function () {
        // if maxCount is zero we just want to show a white colour for all areas
        if (maxCount === 0) {
            return scaleSequential(colourInterpolateFunc(undefined, '#ffffff', '#ffffff')).domain([0, maxCount]);
        }
        return scaleSequential(colourInterpolateFunc(mapColour, mapColourFrom, mapColourTo)).domain([0, maxCount]);
    }, [mapColour, mapColourFrom, mapColourTo, maxCount]);
    var projection = useMemo(function () { return geoMercator().scale(100); }, []);
    var path = useMemo(function () { return geoPath().projection(projection.fitSize([width, height], presentationData)); }, [projection, width, height, presentationData]);
    var areaListCountData = useMemo(function () {
        var e_2, _a;
        var ids = new Set();
        var counts = presentationData.features.map(function (feature) {
            var featureId = feature.id;
            ids.add(featureId);
            var item = areaCounts.get(featureId);
            var displayName = feature && feature.properties ? feature.properties[featureNameProperty] : '';
            var count = 0;
            var overrideZoomToId;
            if (item) {
                displayName = item.overrideDisplayName || displayName;
                count = item.count;
                overrideZoomToId = item.overrideZoomToAreaId;
            }
            return {
                id: feature.id,
                displayName: displayName,
                count: count,
                overrideZoomToId: overrideZoomToId
            };
        });
        try {
            for (var _b = __values(areaCounts.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (!ids.has(key)) {
                    var item = areaCounts.get(key);
                    var displayName = 'unknown';
                    var count = 0;
                    var overrideZoomToId = void 0;
                    if (item) {
                        displayName = item.overrideDisplayName || displayName;
                        count = item.count;
                        overrideZoomToId = item.overrideZoomToAreaId;
                    }
                    counts.push({
                        id: key,
                        displayName: displayName,
                        count: count,
                        overrideZoomToId: overrideZoomToId
                    });
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return counts;
    }, [presentationData, areaCounts, featureNameProperty]);
    var zoomedArea = useMemo(function () {
        if (selectedListItem) {
            return areaListCountData.filter(function (count) { return count.id === selectedListItem.id; })[0];
        }
        return null;
    }, [areaListCountData, selectedListItem]);
    var mapAnimationProps = useSpring({ width: width, height: height, position: 'relative' });
    return (React.createElement(animated.div, { style: mapAnimationProps },
        React.createElement(MapPresentation, { mapData: presentationData.features, zoomToId: selectedListItem ? selectedListItem.overrideZoomToId || selectedListItem.id : '', areaCounts: areaCounts, height: height, width: width, colourScale: colourScale, geoPath: path }),
        React.createElement(PopOutAreaList, { parentHeight: height, allAreaCounts: areaListCountData, fontColour: fontColour, fontSize: listFontSize, onSelect: function (selectedListItem) { return setSelectedListItem(selectedListItem); } }),
        zoomedArea &&
            React.createElement(CountryDisplay, { style: { fontSize: headerFontSize } },
                React.createElement("span", { style: { fontFamily: fontFamily, color: fontColour } }, zoomedArea.displayName + ": " + zoomedArea.count))));
};

export { Colour, TopologyCountMap };
